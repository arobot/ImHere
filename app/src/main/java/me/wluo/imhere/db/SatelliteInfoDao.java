package me.wluo.imhere.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import me.wluo.imhere.pojo.SatelliteInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "location".
*/
public class SatelliteInfoDao extends AbstractDao<SatelliteInfo, Long> {

    public static final String TABLENAME = "location";

    /**
     * Properties of entity SatelliteInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Province = new Property(1, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(2, String.class, "city", false, "CITY");
        public final static Property District = new Property(3, String.class, "district", false, "DISTRICT");
        public final static Property Street = new Property(4, String.class, "street", false, "STREET");
        public final static Property StreetNum = new Property(5, String.class, "streetNum", false, "STREET_NUM");
        public final static Property CityCode = new Property(6, String.class, "cityCode", false, "CITY_CODE");
        public final static Property PoiName = new Property(7, String.class, "poiName", false, "poi");
        public final static Property Accuracy = new Property(8, String.class, "accuracy", false, "ACCURACY");
        public final static Property Altitude = new Property(9, String.class, "altitude", false, "ALTITUDE");
        public final static Property AddTime = new Property(10, String.class, "addTime", false, "time");
    }


    public SatelliteInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SatelliteInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"location\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"PROVINCE\" TEXT," + // 1: province
                "\"CITY\" TEXT," + // 2: city
                "\"DISTRICT\" TEXT," + // 3: district
                "\"STREET\" TEXT," + // 4: street
                "\"STREET_NUM\" TEXT," + // 5: streetNum
                "\"CITY_CODE\" TEXT," + // 6: cityCode
                "\"poi\" TEXT," + // 7: poiName
                "\"ACCURACY\" TEXT," + // 8: accuracy
                "\"ALTITUDE\" TEXT," + // 9: altitude
                "\"time\" TEXT);"); // 10: addTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"location\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SatelliteInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(2, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(3, city);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(4, district);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(5, street);
        }
 
        String streetNum = entity.getStreetNum();
        if (streetNum != null) {
            stmt.bindString(6, streetNum);
        }
 
        String cityCode = entity.getCityCode();
        if (cityCode != null) {
            stmt.bindString(7, cityCode);
        }
 
        String poiName = entity.getPoiName();
        if (poiName != null) {
            stmt.bindString(8, poiName);
        }
 
        String accuracy = entity.getAccuracy();
        if (accuracy != null) {
            stmt.bindString(9, accuracy);
        }
 
        String altitude = entity.getAltitude();
        if (altitude != null) {
            stmt.bindString(10, altitude);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(11, addTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SatelliteInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(2, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(3, city);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(4, district);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(5, street);
        }
 
        String streetNum = entity.getStreetNum();
        if (streetNum != null) {
            stmt.bindString(6, streetNum);
        }
 
        String cityCode = entity.getCityCode();
        if (cityCode != null) {
            stmt.bindString(7, cityCode);
        }
 
        String poiName = entity.getPoiName();
        if (poiName != null) {
            stmt.bindString(8, poiName);
        }
 
        String accuracy = entity.getAccuracy();
        if (accuracy != null) {
            stmt.bindString(9, accuracy);
        }
 
        String altitude = entity.getAltitude();
        if (altitude != null) {
            stmt.bindString(10, altitude);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(11, addTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public SatelliteInfo readEntity(Cursor cursor, int offset) {
        SatelliteInfo entity = new SatelliteInfo( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // province
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // city
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // district
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // street
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // streetNum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cityCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // poiName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // accuracy
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // altitude
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // addTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SatelliteInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setProvince(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCity(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDistrict(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStreet(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStreetNum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCityCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPoiName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAccuracy(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAltitude(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAddTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SatelliteInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SatelliteInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SatelliteInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
